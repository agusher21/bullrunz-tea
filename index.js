// Generated by CoffeeScript 1.9.3
(function() {
  var css2html;

  css2html = require('css-to-html');

  module.exports = (function() {
    this.escapes = ["___", "___"];
    this.jdsl = require('json-dsl');
    this.jdsl.parseKey = function(k) {
      return this.zencode(k + '>{%s}');
    };
    this.jdsl.parseValue = function(v, data) {
      var i, item, items, itemstr, len, result;
      result = '';
      items = false;
      if (v.match(/->/)) {
        items = data[v.split('->')[0]];
        v = v.split('->')[1];
        for (i = 0, len = items.length; i < len; i++) {
          item = items[i];
          itemstr = v.replace(/(\{\{)(.*?)(\}\})/g, function($0, $1, $2) {
            if ($2.length > 1 && $2[0] === '.') {
              return $2 = this.applyFiltersAndEval($2, item, data);
            } else {
              return $2 = this.applyFiltersAndEval($2, item, data);
            }
          });
          if (v.match(/>/)) {
            itemstr = this.zencode(itemstr);
          }
          result += itemstr;
        }
      } else {
        result = v;
        result = result.replace(/(\{\{)(.*?)(\}\})/g, function($0, $1, $2) {
          return $2 = this.applyFiltersAndEval("." + $2, data, data);
        });
      }
      result = result.replace(/___/g, '');
      result = result.replace(/ </g, '<').replace(/> /g, '>');
      return result;
    };
    this.applyFiltersAndEval = function($2, item, data) {
      var filters, is_array;
      filters = this.getFilters($2).filters;
      $2 = this.getFilters($2).str;
      is_array = false;
      if ($2 === '.') {
        is_array = true;
        $2 = item;
      } else {
        $2 = "item" + $2;
        $2 = String(eval($2)).replace(/undefined/, '');
      }
      $2 = this.applyFilters($2, filters, data);
      if (is_array) {
        $2 = this.escapes[0] + $2 + escapes[1];
      }
      return $2;
    };
    this.getFilters = function(str) {
      var filters;
      filters = [];
      if (str.match(/|/)) {
        filters = str.split('|');
        str = filters.shift();
      }
      return {
        str: str,
        filters: filters
      };
    };
    this.applyFilters = function(str, filters, data) {
      var filter, i, len;
      if (filters.length) {
        for (i = 0, len = filters.length; i < len; i++) {
          filter = filters[i];
          str = eval('data.' + filter + '("' + str + '")');
        }
      }
      return str;
    };
    this.parse = function(json, data) {
      return this.jdsl.parse(json, data);
    };
    return this;
  })();

}).call(this);
